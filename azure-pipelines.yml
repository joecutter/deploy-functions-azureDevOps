# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

variables:
  vmImage: 'ubuntu-latest'
  location: 'Central US'
  azureSubscription: 'MxI-subscription'
  resourceGroupName: 'mxi-cicd'
  sitesFunctionAppName: 'MxI-ci-cd-poc'
  appServicePlanName: 'MxI-ci-cd-poc-app-service-plan'
  appInsightsName: 'MxI-ci-cd-poc-app-insight'
  functionStorageAccountName: 'MxI-ci-cd-poc-storage'
  envName: 'MxI-ci-cd-poc'
  buildConfiguration: 'Release'
  SolutionPath: '$(System.DefaultWorkingDirectory)/*.sln'

stages:
  
# Build Stage
- stage: Build
  displayName: Build and push image to ACR

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImage)

    steps:
      #Dotnet Version
      - task: UseDotNet@2      
        displayName: 'Use .NET Core SDK 2.x'
        inputs:
          packageType: 'sdk'
          version: '2.x'
          installationPath: $(Agent.ToolsDirectory)/dotnet

      #Dotnet restore
      - task: DotNetCoreCLI@2
        displayName: Restore NuGet packages           
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
    
      #Dotnet build
      - task: DotNetCoreCLI@2
        displayName: Build solution
        inputs:
          command: 'build'
          projects: '**/*.csproj'
          # arguments: '--configuration $(buildConfiguration) --output $(Build.BinariesDirectory)'        
          
      #Dotnet Publish Code Coverage Report
      - task: DotNetCoreCLI@2
        displayName: Publish solution
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish_output'

      # Copy ARM templates
      - task: CopyFiles@2
        displayName: 'Copy ARM templates'
        inputs:
          SourceFolder: ArmTemplates
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
            
      #Publish build artifacts
      - task: PublishBuildArtifacts@1
        displayName: Publish build artifacts
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/publish_output'
          ArtifactName: 'app'
          publishLocation: 'Container'  

        
# Release Stage
- stage: Staging
  displayName: Deploy image to app service
  
  jobs:
    - job: Release
      pool:
        vmImage: $(vmImage)
        
      steps:
        # Don't clone the repo
        - checkout: none
        
        # Download the published application artifact
        - download: current
          artifact: app
        
        # Create or update Azure Function App Service
        - task: AzureResourceGroupDeployment@2
          displayName: 'Azure Deployment:Create Azure Function App Service'
          inputs:
            azureSubscription: '$(azureSubscription)'
            resourceGroupName: '$(resourceGroupName)'
            location: $(location)
            csmFile: '$(Pipeline.Workspace)/**/function-app-template.json'
            overrideParameters: '-sitesFunctionAppName $(sitesFunctionAppName) -appServicePlanName $(appServicePlanName) -appInsightsName "$(appInsightsName)" -functionStorageAccountName "$(functionStorageAccountName)" -envName $(envName)'

        # Deploy Function App Service          
        - task: AzureFunctionApp@1
          inputs:
            azureSubscription: '$(azureSubscription)'
            resourceGroupName: '$(resourceGroupName)'
            appType: 'functionApp'
            appName: '$(sitesFunctionAppName)'
            package: '$(System.DefaultWorkingDirectory)/_joecutter.deploy-functions-azureDevOps/app'
            runtimeStack: 'DOTNET|2.2'